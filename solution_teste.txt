Used: [0], Unused: [1, 2, 3, 4, 5, 6, 7, 8], Edges: 0, Neighbours: [0, 1, 1, 1, 0, 0, 0, 0, 0]
Used: [0, 1], Unused: [2, 3, 4, 5, 6, 7, 8], Edges: 1, Neighbours: [1, 1, 2, 2, 0, 0, 0, 0, 0]
Used: [0, 1, 2], Unused: [3, 4, 5, 6, 7, 8], Edges: 3, Neighbours: [2, 2, 2, 3, 1, 0, 0, 0, 0]
Used: [0, 1, 2, 3], Unused: [4, 5, 6, 7, 8], Edges: 6, Neighbours: [3, 3, 3, 3, 2, 1, 0, 0, 0]
Used: [0, 2, 3], Unused: [4, 5, 6, 7, 8, 1], Edges: 3, Neighbours: [2, 3, 2, 2, 2, 1, 0, 0, 0]
edges OK: 3
neighbour counts OK
done invariants check
All swap increments match the real application
No improving swap found (brute force).
<class '__main__.SwapMove'> 0 3
<class '__main__.SwapMove'> 0 4
<class '__main__.SwapMove'> 0 5
<class '__main__.SwapMove'> 0 6
<class '__main__.SwapMove'> 0 7
<class '__main__.SwapMove'> 0 8
<class '__main__.SwapMove'> 1 3
<class '__main__.SwapMove'> 1 4
<class '__main__.SwapMove'> 1 5
<class '__main__.SwapMove'> 1 6
<class '__main__.SwapMove'> 1 7
total moves approx: used*unused = 18
3
3
1 2 3
Used: [0], Unused: [1, 2, 3, 4, 5, 6, 7, 8], Edges: 0, Neighbours: [0, 1, 1, 1, 0, 0, 0, 0, 0]
Used: [0, 1], Unused: [2, 3, 4, 5, 6, 7, 8], Edges: 1, Neighbours: [1, 1, 2, 2, 0, 0, 0, 0, 0]
Used: [0, 1, 2], Unused: [3, 4, 5, 6, 7, 8], Edges: 3, Neighbours: [2, 2, 2, 3, 1, 0, 0, 0, 0]
Used: [0, 1, 2, 3], Unused: [4, 5, 6, 7, 8], Edges: 6, Neighbours: [3, 3, 3, 3, 2, 1, 0, 0, 0]
Used: [0, 2, 3], Unused: [4, 5, 6, 7, 8, 1], Edges: 3, Neighbours: [2, 3, 2, 2, 2, 1, 0, 0, 0]
edges OK: 3
neighbour counts OK
done invariants check
All swap increments match the real application
No improving swap found (brute force).
<class '__main__.SwapMove'> 0 3
<class '__main__.SwapMove'> 0 4
<class '__main__.SwapMove'> 0 5
<class '__main__.SwapMove'> 0 6
<class '__main__.SwapMove'> 0 7
<class '__main__.SwapMove'> 0 8
<class '__main__.SwapMove'> 1 3
<class '__main__.SwapMove'> 1 4
<class '__main__.SwapMove'> 1 5
<class '__main__.SwapMove'> 1 6
<class '__main__.SwapMove'> 1 7
total moves approx: used*unused = 18
3
3
1 2 3
